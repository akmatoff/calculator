{"version":3,"sources":["redux/calculatorSlice.ts","components/Button.tsx","components/Calculator.tsx","redux/store.ts","App.tsx","index.tsx"],"names":["calculatorSlice","createSlice","name","initialState","currentOperand","prevOperand","operation","reducers","clear","state","appendNumber","action","payload","includes","setOperation","setCurrentOperand","setPrevOperand","calculate","result","prev","parseFloat","current","toString","actions","Button","id","type","children","dispatch","useDispatch","useSelector","calculator","className","onClick","test","isNaN","parseInt","Calculator","store","configureStore","reducer","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c7e99d78.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nimport { ICalculatorState } from \"../types/types\";\r\n\r\nconst initialState: ICalculatorState = {\r\n  currentOperand: \"0\",\r\n  prevOperand: \"\",\r\n  operation: null\r\n}\r\n\r\nconst calculatorSlice = createSlice({\r\n  name: \"calculators\",\r\n  initialState,\r\n  reducers: {\r\n    clear: (state) => {\r\n      return {...state, prevOperand: \"\", currentOperand: \"\"}\r\n    },\r\n    appendNumber: (state, action) => {\r\n      if (action.payload === '.' && state.currentOperand.includes('.')) return;\r\n      if (action.payload === '0' && state.currentOperand === '0') return;\r\n\r\n      return { ...state, currentOperand: state.currentOperand + action.payload}\r\n    },\r\n    setOperation: (state, action) => {\r\n      if (state.currentOperand === '') return;\r\n      return {...state, operation: action.payload}\r\n    },\r\n    setCurrentOperand: (state, action) => {\r\n      return { ...state, currentOperand: action.payload}\r\n    },\r\n    setPrevOperand: (state, action) => {\r\n      return { ...state, prevOperand: action.payload }\r\n    },\r\n    calculate: (state, action) => {\r\n\r\n      var result: number;\r\n      var prev: number = parseFloat(state.prevOperand);\r\n      var current: number = parseFloat(state.currentOperand);\r\n\r\n      switch (state.operation) {\r\n        case \"add\":\r\n          result = prev + current;\r\n          break;\r\n        case \"subtract\":\r\n          result = prev - current;\r\n          break;\r\n        case \"divide\":\r\n          result = prev / current;\r\n          break;\r\n        case \"multiply\":\r\n          result = prev * current;\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n\r\n    if (action.payload === \"equals\") return { ...state, prevOperand: \"\", currentOperand: result.toString(), operation: null}\r\n\r\n      return { ...state, prevOperand: result.toString(), currentOperand: \"\", operation: action.payload}\r\n    \r\n    }\r\n  }\r\n})\r\n\r\nexport const {clear, appendNumber, setOperation, setCurrentOperand, setPrevOperand, calculate} = calculatorSlice.actions;\r\n\r\nexport default calculatorSlice.reducer;\r\n\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppDispatch, RootState } from \"../redux/store\";\r\nimport {\r\n  clear,\r\n  appendNumber,\r\n  setOperation,\r\n  setCurrentOperand,\r\n  setPrevOperand,\r\n  calculate,\r\n} from \"../redux/calculatorSlice\";\r\nimport { IButton } from \"../types/types\";\r\n\r\nexport default function Button({ id, type, children }: IButton) {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const prevOperand = useSelector(\r\n    (state: RootState) => state.calculator.prevOperand\r\n  );\r\n  const currentOperand = useSelector(\r\n    (state: RootState) => state.calculator.currentOperand\r\n  );\r\n  const operation = useSelector(\r\n    (state: RootState) => state.calculator.operation\r\n  );\r\n\r\n  const onButtonClick = () => {\r\n    if (children === \".\" && (currentOperand === \"0\" || currentOperand === \"\"))\r\n      return;\r\n    if (\r\n      type === \"operation\" &&\r\n      (currentOperand === \"0\" || currentOperand === \"\") &&\r\n      prevOperand === \"\"\r\n    )\r\n      return;\r\n\r\n    switch (id) {\r\n      case \"clear\":\r\n        dispatch(clear());\r\n        return;\r\n      case \"equals\":\r\n        dispatch(calculate(id));\r\n        return;\r\n    }\r\n\r\n    currentOperand === \"0\" && dispatch(clear());\r\n\r\n    dispatch(appendNumber(children));\r\n\r\n    if (type === \"operation\" && id !== \"equals\") {\r\n      if (!operation) dispatch(setOperation(id));\r\n      if (!prevOperand) {\r\n        dispatch(setCurrentOperand(\"\"));\r\n        dispatch(setPrevOperand(currentOperand));\r\n      }\r\n      if (prevOperand !== \"\") {\r\n        let regex = /[+|-|*]/gi;\r\n        if (currentOperand === \"\" || regex.test(currentOperand)) return;\r\n        if (isNaN(parseInt(currentOperand))) {\r\n          dispatch(setOperation(id));\r\n          dispatch(setCurrentOperand(\"\"));\r\n          return;\r\n        }\r\n\r\n        dispatch(calculate(id));\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id={id} className={\"button \" + type} onClick={onButtonClick}>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n","import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../redux/store\";\r\nimport Button from \"./Button\";\r\nimport \"./Calculator.css\";\r\n\r\nfunction Calculator() {\r\n  const currentOperand = useSelector(\r\n    (state: RootState) => state.calculator.currentOperand\r\n  );\r\n  const prevOperand = useSelector(\r\n    (state: RootState) => state.calculator.prevOperand\r\n  );\r\n\r\n  return (\r\n    <div id=\"calculator\" className=\"flex-column\">\r\n      <div id=\"display\" className=\"flex-column\">\r\n        <div id=\"prev-operand\">{prevOperand}</div>\r\n        <div id=\"current-operand\">\r\n          {currentOperand === \"\" ? 0 : currentOperand}\r\n        </div>\r\n      </div>\r\n      <div id=\"buttons-container\">\r\n        <Button id=\"clear\" type=\"operation\">\r\n          AC\r\n        </Button>\r\n        <Button id=\"divide\" type=\"operation\">\r\n          /\r\n        </Button>\r\n        <Button id=\"multiply\" type=\"operation\">\r\n          x\r\n        </Button>\r\n\r\n        <Button id=\"one\" type=\"number\">\r\n          1\r\n        </Button>\r\n\r\n        <Button id=\"two\" type=\"number\">\r\n          2\r\n        </Button>\r\n\r\n        <Button id=\"three\" type=\"number\">\r\n          3\r\n        </Button>\r\n\r\n        <Button id=\"subtract\" type=\"operation\">\r\n          -\r\n        </Button>\r\n\r\n        <Button id=\"four\" type=\"number\">\r\n          4\r\n        </Button>\r\n\r\n        <Button id=\"five\" type=\"number\">\r\n          5\r\n        </Button>\r\n\r\n        <Button id=\"six\" type=\"number\">\r\n          6\r\n        </Button>\r\n\r\n        <Button id=\"add\" type=\"operation\">\r\n          +\r\n        </Button>\r\n\r\n        <Button id=\"seven\" type=\"number\">\r\n          7\r\n        </Button>\r\n\r\n        <Button id=\"eight\" type=\"number\">\r\n          8\r\n        </Button>\r\n\r\n        <Button id=\"nine\" type=\"number\">\r\n          9\r\n        </Button>\r\n\r\n        <Button id=\"equals\" type=\"operation\">\r\n          =\r\n        </Button>\r\n\r\n        <Button id=\"zero\" type=\"number\">\r\n          0\r\n        </Button>\r\n        <Button id=\"decimal\" type=\"number\">\r\n          .\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Calculator;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nimport calculatorSlice from \"./calculatorSlice\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    calculator: calculatorSlice\r\n  }\r\n})\r\n\r\nexport default store;\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n\r\nexport type AppDispatch = typeof store.dispatch;","import { Provider } from \"react-redux\";\nimport Calculator from \"./components/Calculator\";\nimport store from \"./redux/store\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <main className=\"flex-column centered\">\n          <Calculator />\n        </main>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}